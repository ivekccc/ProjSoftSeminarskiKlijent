/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import auth.LoginForm;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import domain.Termin;
import com.toedter.calendar.JDateChooser;
import domain.Administrator;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionEvent;
import transfer.Response;
import userController.UserInterfaceController;
import modeliTabela.ModelTabeleTermini;



/**
 *
 * @author x
 */
public class GlavnaForma extends javax.swing.JFrame {
    private List<Termin> listaTermina=new ArrayList<>();
    private List<Termin> listaZakazanihTermina=new ArrayList<>();
    private List<Termin> listaSlobodnihTermina=new ArrayList<>();
    private List<Termin> filtriranaLista=new ArrayList<>();
    
    private Administrator ulogovaniAdmin;
    /**
     * Creates new form FormaZaRadSaTerminima
     */
    public GlavnaForma(Administrator ulogovaniAdmin) {
        initComponents();
        this.ulogovaniAdmin=ulogovaniAdmin;
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                // Pozivanje metode za odjavu
                odjaviSe();
            }

        });
        this.setTitle("Glavna forma");
        this.setLocationRelativeTo(null);
        jButtonDetalji.setEnabled(false);
        jLabel3.setText("Prijavljeni administrator: "+UserInterfaceController.getInstance().getPrijavljeniAdministrator().getUsername());
        popuniTabeluTermina();
        jTableTermini.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            upravljajDugmetomDetalji(evt);
        }

            private void upravljajDugmetomDetalji(ListSelectionEvent evt) {
                int izabraniRed = jTableTermini.getSelectedRow();
                 if (izabraniRed == -1) {
                    jButtonDetalji.setEnabled(false);
                    return;
                }
                
                ModelTabeleTermini mtt=(ModelTabeleTermini) jTableTermini.getModel();
                Termin t=mtt.getListaTermina().get(izabraniRed);
                
               if(t.isZakazan()){
                   jButtonDetalji.setEnabled(true);
               }
                else{
                   jButtonDetalji.setEnabled(false);
               }
            }
    });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTermini = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButtonDodaj = new javax.swing.JButton();
        jButtonIzbrisi = new javax.swing.JButton();
        jButtonZakazi = new javax.swing.JButton();
        jButtonOtkazi = new javax.swing.JButton();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jButtonFiltriraj = new javax.swing.JButton();
        jButtonPonisti = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonDetalji = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxZakazan = new javax.swing.JCheckBox();
        jCheckBoxSlobodan = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemKorisnici = new javax.swing.JMenuItem();
        jMenuItemRekviziti = new javax.swing.JMenuItem();
        jMenuItemOdjava = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableTermini.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableTermini);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("GLAVNA FORMA");

        jButtonDodaj.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonDodaj.setText("Dodaj termin");
        jButtonDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajActionPerformed(evt);
            }
        });

        jButtonIzbrisi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonIzbrisi.setText("Izbrisi");
        jButtonIzbrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIzbrisiActionPerformed(evt);
            }
        });

        jButtonZakazi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonZakazi.setText("Zakazi");
        jButtonZakazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZakaziActionPerformed(evt);
            }
        });

        jButtonOtkazi.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonOtkazi.setText("Otkazi");
        jButtonOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOtkaziActionPerformed(evt);
            }
        });

        jButtonFiltriraj.setText("FILTRIRAJ");
        jButtonFiltriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrirajActionPerformed(evt);
            }
        });

        jButtonPonisti.setText("PONISTI");
        jButtonPonisti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPonistiActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("TABELA TERMINA");

        jButtonDetalji.setText("Detalji");
        jButtonDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetaljiActionPerformed(evt);
            }
        });

        jLabel3.setText("jLabel3");

        jCheckBoxZakazan.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCheckBoxZakazan.setText("Zakazan");
        jCheckBoxZakazan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxZakazanActionPerformed(evt);
            }
        });

        jCheckBoxSlobodan.setText("Slobodan");
        jCheckBoxSlobodan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSlobodanActionPerformed(evt);
            }
        });

        jMenu1.setText("Meni");

        jMenuItemKorisnici.setText("Rad sa korisnicima");
        jMenuItemKorisnici.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKorisniciActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemKorisnici);

        jMenuItemRekviziti.setText("Rad sa rekvizitima");
        jMenuItemRekviziti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRekvizitiActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemRekviziti);

        jMenuItemOdjava.setText("Odjava");
        jMenuItemOdjava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOdjavaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOdjava);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(293, 293, 293))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonDodaj)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonDetalji))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonFiltriraj, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxZakazan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonOtkazi, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(jButtonZakazi, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(jButtonPonisti, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonIzbrisi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jCheckBoxSlobodan, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxZakazan)
                            .addComponent(jCheckBoxSlobodan))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonFiltriraj)
                            .addComponent(jButtonPonisti))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButtonIzbrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonOtkazi, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(jButtonZakazi, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDetalji))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Administrator getUlogovaniAdmin() {
        return ulogovaniAdmin;
    }
    
    
    private void jButtonDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajActionPerformed
        DodavanjeTerminaForma dtf=new DodavanjeTerminaForma(this, true);
        dtf.setVisible(true);
    }//GEN-LAST:event_jButtonDodajActionPerformed

    public List<Termin> getListaTermina() {
        return listaTermina;
    }

    public void setListaTermina(List<Termin> listaTermina) {
        this.listaTermina = listaTermina;
    }

    
    private void jButtonIzbrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIzbrisiActionPerformed
        int izabraniRed=jTableTermini.getSelectedRow();
        if(izabraniRed==-1){
            JOptionPane.showMessageDialog(this, "Neuspesno brisanje termina. Morate da izaberete termin koji zelite da obrisete!","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Termin t;
        
        ModelTabeleTermini mtt=(ModelTabeleTermini)jTableTermini.getModel();
        t=mtt.getListaTermina().get(izabraniRed);
        
        if(t.isZakazan()){
            JOptionPane.showMessageDialog(this, "Neuspesno brisanje termina. Morate da otkazete termin da bi ga obrisali!","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Response response=UserInterfaceController.getInstance().izbrisiTermin(t);
        if(response.isSuccessful()){
            JOptionPane.showMessageDialog(this, response.getMessage(),"Uspeh",JOptionPane.INFORMATION_MESSAGE);
            listaTermina.remove(t);
            mtt.ukloniTermin(t);
        }
        else{
            JOptionPane.showMessageDialog(this, response.getMessage(),"Greska",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonIzbrisiActionPerformed

    private void jButtonZakaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZakaziActionPerformed
        int izabraniRed=jTableTermini.getSelectedRow();
        if(izabraniRed==-1){
            JOptionPane.showMessageDialog(this, "Neuspesno zakazivanje termina. Morate da izaberete termin koji zakazujete","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Termin t;
        
        ModelTabeleTermini mtt=(ModelTabeleTermini)jTableTermini.getModel();
        t=mtt.getListaTermina().get(izabraniRed);
        if(t.isZakazan()){
            JOptionPane.showMessageDialog(this, "Neuspesno zakazivanje termina. Ovaj termin je vec zakazan","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        IzborKorisnikaPriZakazivanjuForma ikpzf=new IzborKorisnikaPriZakazivanjuForma(this, true,t);
        ikpzf.setVisible(true);
        
        if(jCheckBoxSlobodan.isSelected()){
            if (t.isZakazan()) {
                listaSlobodnihTermina.remove(t);
                mtt = new ModelTabeleTermini(listaSlobodnihTermina);
                jTableTermini.setModel(mtt);
            }
        }
        
    }//GEN-LAST:event_jButtonZakaziActionPerformed

    private void jButtonOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOtkaziActionPerformed
        int izabraniRed=jTableTermini.getSelectedRow();
        if(izabraniRed==-1){
            JOptionPane.showMessageDialog(this, "Neuspesno otkazivanje termina. Morate da izaberete termin koji otkazujete","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Termin t;
        ModelTabeleTermini mtt=(ModelTabeleTermini)jTableTermini.getModel();
        t=mtt.getListaTermina().get(izabraniRed);
        if(!(t.isZakazan())){
            JOptionPane.showMessageDialog(this, "Neuspesno otkazivanje termina. Ovaj termin je vec slobodan","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        Response respone=UserInterfaceController.getInstance().otkaziTermin(t);
        if(respone.isSuccessful()){
            JOptionPane.showMessageDialog(this, respone.getMessage(),"Uspeh",JOptionPane.INFORMATION_MESSAGE);
            t.setZakazan(false);
            listaZakazanihTermina.remove(t);
            mtt=(ModelTabeleTermini) jTableTermini.getModel();
            mtt.osveziTabelu();
            return;
        }
        else{
            JOptionPane.showMessageDialog(this, respone.getMessage(),"Greska",JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jButtonOtkaziActionPerformed

    private void jButtonFiltrirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrirajActionPerformed
        
        boolean trebajuZakazani = jCheckBoxZakazan.isSelected();
    boolean trebajuSlobodni = jCheckBoxSlobodan.isSelected();
    Date izabraniDatum = jDateChooser.getDate();
    List<Termin> novaFiltriranaLista = new ArrayList<>();

    for (Termin termin : listaTermina) {
        boolean zadovoljavaDatum = (izabraniDatum == null) || isSameDay(termin.getDatum(), izabraniDatum);
        boolean zadovoljavaZakazanost = (!trebajuZakazani || termin.isZakazan()) && 
                                        (!trebajuSlobodni || !termin.isZakazan());

        if (zadovoljavaDatum && zadovoljavaZakazanost) {
            novaFiltriranaLista.add(termin);
        }
    }

    filtriranaLista = novaFiltriranaLista; // Ažurirajte originalnu listu filtriranih termina
    ModelTabeleTermini mtt = new ModelTabeleTermini(filtriranaLista);
    jTableTermini.setModel(mtt);
    }//GEN-LAST:event_jButtonFiltrirajActionPerformed

    private void jButtonPonistiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPonistiActionPerformed
        jDateChooser.setDate(null);
        jCheckBoxSlobodan.setSelected(false);
        jCheckBoxZakazan.setSelected(false);
        ModelTabeleTermini mtt = new ModelTabeleTermini(listaTermina);
        jTableTermini.setModel(mtt);
    }//GEN-LAST:event_jButtonPonistiActionPerformed

    private void jMenuItemKorisniciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKorisniciActionPerformed
        FormaZaRadSaKorisnicima fk=new FormaZaRadSaKorisnicima(ulogovaniAdmin);
        fk.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItemKorisniciActionPerformed

    private void jMenuItemOdjavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOdjavaActionPerformed
        odjaviSe();
    }//GEN-LAST:event_jMenuItemOdjavaActionPerformed

    private void jButtonDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetaljiActionPerformed
        int izabraniRed=jTableTermini.getSelectedRow();
        Termin termin;
        
        ModelTabeleTermini mtt=(ModelTabeleTermini)jTableTermini.getModel();
        termin=mtt.getListaTermina().get(izabraniRed);
        DetaljiTerminaForma dtf=new DetaljiTerminaForma(this, true, termin);
        dtf.setVisible(true);
    }//GEN-LAST:event_jButtonDetaljiActionPerformed

    private void jCheckBoxZakazanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxZakazanActionPerformed
        jCheckBoxSlobodan.setSelected(false);
        
    }//GEN-LAST:event_jCheckBoxZakazanActionPerformed

    private void jCheckBoxSlobodanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSlobodanActionPerformed
        jCheckBoxZakazan.setSelected(false);
        
    }//GEN-LAST:event_jCheckBoxSlobodanActionPerformed

    private void jMenuItemRekvizitiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRekvizitiActionPerformed
        new FormaZaRadSaRekvizitima(ulogovaniAdmin).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItemRekvizitiActionPerformed
   
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDetalji;
    private javax.swing.JButton jButtonDodaj;
    private javax.swing.JButton jButtonFiltriraj;
    private javax.swing.JButton jButtonIzbrisi;
    private javax.swing.JButton jButtonOtkazi;
    private javax.swing.JButton jButtonPonisti;
    private javax.swing.JButton jButtonZakazi;
    private javax.swing.JCheckBox jCheckBoxSlobodan;
    private javax.swing.JCheckBox jCheckBoxZakazan;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemKorisnici;
    private javax.swing.JMenuItem jMenuItemOdjava;
    private javax.swing.JMenuItem jMenuItemRekviziti;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTermini;
    // End of variables declaration//GEN-END:variables

    public void popuniTabeluTermina() {
        Response response=UserInterfaceController.getInstance().vratiTermine();
        List<Termin> listaTermina=(List<Termin>) response.getResult();
        if(response.isSuccessful()){
            this.listaTermina=listaTermina;
            ModelTabeleTermini mtt=new ModelTabeleTermini(listaTermina);
            jTableTermini.setModel(mtt);
        }
        else{
            ModelTabeleTermini mtt=new ModelTabeleTermini();
            jTableTermini.setModel(mtt);
            JOptionPane.showMessageDialog(this, response.getMessage());
        }
        
    }

    void zakaziIOsvezi(Termin termin) {
        for(Termin t:listaTermina){
            if(t.equals(termin)){
                t.setZakazan(true);
            }
        }
        ModelTabeleTermini mtt=(ModelTabeleTermini) jTableTermini.getModel();
        mtt.osveziTabelu();
    }
    
    private boolean isSameDay(Date date1, Date date2) {
    Calendar cal1 = Calendar.getInstance();
    Calendar cal2 = Calendar.getInstance();
    cal1.setTime(date1);
    cal2.setTime(date2);
    return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
           cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
}
    private void odjaviSe() {
        Response response = UserInterfaceController.getInstance().odjaviAdministratora();
        if (response.isSuccessful()) {
            JOptionPane.showMessageDialog(this, response.getMessage());
            // Zatvaranje svih formi i povratak na login formu
            dispose();
            new LoginForm().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, response.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }
}

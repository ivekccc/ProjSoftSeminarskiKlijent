/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forme;

import domain.Termin;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import transfer.Response;
import userController.UserInterfaceController;


/**
 *
 * @author x
 */
public class DodavanjeTerminaForma extends javax.swing.JDialog {
    GlavnaForma gf;
    /**
     * Creates new form DodavanjeIIzmenaTerminaForma
     */
    public DodavanjeTerminaForma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        gf=(GlavnaForma)parent;
        initComponents();
        this.setLocationRelativeTo(gf);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.setTitle("Dodavanje termina");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPocetak = new javax.swing.JTextField();
        jTextFieldZavrsetak = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButtonDodaj = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButtonOdustani = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Datum:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Vreme pocetka:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Vreme zavrsetka:");

        jTextFieldPocetak.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jTextFieldZavrsetak.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("DODAVANJE TERMINA");

        jButtonDodaj.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonDodaj.setText("Dodaj");
        jButtonDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel1.setText("format: \"14:00\", \"08:15\"");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel5.setText("format: \"14:00\", \"08:15\"");

        jButtonOdustani.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonOdustani.setText("Odustani");
        jButtonOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOdustaniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButtonDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))))
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPocetak, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldZavrsetak, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel6)
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldPocetak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldZavrsetak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDodaj)
                    .addComponent(jButtonOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajActionPerformed
        Date datum=jDateChooser1.getDate();
        String vremePocetka=jTextFieldPocetak.getText();
        String vremeZavrsetka=jTextFieldZavrsetak.getText();
        if(datum==null || vremePocetka.isEmpty() || vremeZavrsetka.isEmpty()){
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Sva polja moraju da budu popunjena","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(datum.before(new Date())){
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Datum mora da bude u buducnosti","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(!(vremePocetka.matches("([01]?\\d|2[0-3]):[0-5]\\d") && vremeZavrsetka.matches("([01]?\\d|2[0-3]):[0-5]\\d"))){
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Vreme pocetka i zavrsetka mora da bude u formatu:\"14:00\",\"08:00\" ","Upozorenje",JOptionPane.WARNING_MESSAGE);
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        try {
        Date pocetak = sdf.parse(vremePocetka);
        Date zavrsetak = sdf.parse(vremeZavrsetka);
        
        if (!pocetak.before(zavrsetak)) {
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Vreme pocetka mora biti pre vremena zavrsetka", "Upozorenje", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (daLiTerminPostoji(datum, pocetak, zavrsetak)) {
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Termin se preklapa sa već postojećim terminom.", "Upozorenje", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        long duzinaUmilisekundama = zavrsetak.getTime() - pocetak.getTime();
        long duzinaMinuti = duzinaUmilisekundama / (1000 * 60);
        
        if (duzinaMinuti > 150) {
            JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Termin ne sme trajati duže od 2.5 sata", "Upozorenje", JOptionPane.WARNING_MESSAGE);
            return;
            }
        }catch (ParseException ex) {
        Logger.getLogger(DodavanjeTerminaForma.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Neuspesno dodavanje termina. Došlo je do greške prilikom obrade vremena", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        Termin t=new Termin(-1, datum, vremePocetka, vremeZavrsetka, false, gf.getUlogovaniAdmin(), null);
        
       
        Response response=UserInterfaceController.getInstance().dodajTermin(t);
        if(response.isSuccessful()){
            JOptionPane.showMessageDialog(this, response.getMessage(),"Uspeh",JOptionPane.INFORMATION_MESSAGE);
            gf.popuniTabeluTermina();
            this.dispose();
        }
        else{
            JOptionPane.showMessageDialog(this, response.getMessage(),"Greska",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDodajActionPerformed

    private void jButtonOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonOdustaniActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDodaj;
    private javax.swing.JButton jButtonOdustani;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextFieldPocetak;
    private javax.swing.JTextField jTextFieldZavrsetak;
    // End of variables declaration//GEN-END:variables

    private boolean daLiTerminPostoji(Date datum, Date pocetak, Date zavrsetak) {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");

    for (Termin t : gf.getListaTermina()) {
        if (isSameDay(datum, t.getDatum())) {
            try {
                Date pocetakPostojeci = sdf.parse(t.getVremePocetka());
                Date zavrsetakPostojeci = sdf.parse(t.getVremeZavrsetka());

                if ((pocetak.before(zavrsetakPostojeci) && zavrsetak.after(pocetakPostojeci)) ||
                    (pocetak.equals(pocetakPostojeci) || zavrsetak.equals(zavrsetakPostojeci))) {
                    return true;
                }
            } catch (ParseException ex) {
                Logger.getLogger(DodavanjeTerminaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    return false;
    }
    
    private boolean isSameDay(Date date1, Date date2) {
    Calendar cal1 = Calendar.getInstance();
    Calendar cal2 = Calendar.getInstance();
    cal1.setTime(date1);
    cal2.setTime(date2);
    return cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
           cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR);
}

}
